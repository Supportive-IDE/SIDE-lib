"use strict";function _typeof(e){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},_typeof(e)}Object.defineProperty(exports,"__esModule",{value:!0}),exports.identifyMisconceptions=exports.Reason=exports.MisconceptionType=exports.MisconceptionOccurrence=exports.Misconception=void 0;var _enum=_interopRequireDefault(require("../doc-model/enum.js")),_expression=require("../doc-model/expression.js"),_constants=require("../utils/constants.js"),_symptom2=require("./symptom.js"),_identifiers=require("../doc-model/identifiers.js");function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&_setPrototypeOf(e,t)}function _setPrototypeOf(e,t){return _setPrototypeOf=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},_setPrototypeOf(e,t)}function _createSuper(e){var t=_isNativeReflectConstruct();return function(){var n,o=_getPrototypeOf(e);if(t){var r=_getPrototypeOf(this).constructor;n=Reflect.construct(o,arguments,r)}else n=o.apply(this,arguments);return _possibleConstructorReturn(this,n)}}function _possibleConstructorReturn(e,t){if(t&&("object"===_typeof(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return _assertThisInitialized(e)}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}function _getPrototypeOf(e){return _getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},_getPrototypeOf(e)}function _defineProperty(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function _createClass(e,t,n){return t&&_defineProperties(e.prototype,t),n&&_defineProperties(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e}function _classPrivateFieldInitSpec(e,t,n){_checkPrivateRedeclaration(e,t),t.set(e,n)}function _checkPrivateRedeclaration(e,t){if(t.has(e))throw new TypeError("Cannot initialize the same private elements twice on an object")}function _classPrivateFieldGet(e,t){return _classApplyDescriptorGet(e,_classExtractFieldDescriptor(e,t,"get"))}function _classApplyDescriptorGet(e,t){return t.get?t.get.call(e):t.value}function _classPrivateFieldSet(e,t,n){return _classApplyDescriptorSet(e,_classExtractFieldDescriptor(e,t,"set"),n),n}function _classExtractFieldDescriptor(e,t,n){if(!t.has(e))throw new TypeError("attempted to "+n+" private field on non-instance");return t.get(e)}function _classApplyDescriptorSet(e,t,n){if(t.set)t.set.call(e,n);else{if(!t.writable)throw new TypeError("attempted to set read only private field");t.value=n}}function _toConsumableArray(e){return _arrayWithoutHoles(e)||_iterableToArray(e)||_unsupportedIterableToArray(e)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _iterableToArray(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}function _arrayWithoutHoles(e){if(Array.isArray(e))return _arrayLikeToArray(e)}function _slicedToArray(e,t){return _arrayWithHoles(e)||_iterableToArrayLimit(e,t)||_unsupportedIterableToArray(e,t)||_nonIterableRest()}function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _iterableToArrayLimit(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var o,r,i=[],a=!0,s=!1;try{for(n=n.call(e);!(a=(o=n.next()).done)&&(i.push(o.value),!t||i.length!==t);a=!0);}catch(e){s=!0,r=e}finally{try{a||null==n.return||n.return()}finally{if(s)throw r}}return i}}function _arrayWithHoles(e){if(Array.isArray(e))return e}function _createForOfIteratorHelper(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=_unsupportedIterableToArray(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var o=0,r=function(){};return{s:r,n:function(){return o>=e.length?{done:!0}:{done:!1,value:e[o++]}},e:function(e){throw e},f:r}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,a=!0,s=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return a=e.done,e},e:function(e){s=!0,i=e},f:function(){try{a||null==n.return||n.return()}finally{if(s)throw i}}}}function _unsupportedIterableToArray(e,t){if(e){if("string"==typeof e)return _arrayLikeToArray(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?_arrayLikeToArray(e,t):void 0}}function _arrayLikeToArray(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,o=new Array(t);n<t;n++)o[n]=e[n];return o}var identifyMisconceptions=function(e,t,n){var o,r=new Map,i=_createForOfIteratorHelper(misconceptionDetector);try{for(i.s();!(o=i.n()).done;){var a=_slicedToArray(o.value,2),s=a[0],c=(0,a[1])(e,t,n);c.length>0&&r.set(s,Misconception.create(s,c))}}catch(e){i.e(e)}finally{i.f()}return r};exports.identifyMisconceptions=identifyMisconceptions;var assignCompares=function(e){return e.filter((function(e){return e.getID()===_symptom2.SymptomType.AssignmentInBoolean.name})).map((function(e){return new MisconceptionOccurrence(e.getLineNumber(),e.getDocIndex(),new Reason([e],"A single equals operator is used in a boolean expression where a double equals operator might be expected."))}))},colonAssigns=function(e){var t,n=[],o=_createForOfIteratorHelper(e.filter((function(e){return e.getID()===_symptom2.SymptomType.UnexpectedColon.name&&e.getAdditionalInfo().after.type!==_constants.EMPTY&&e.getAdditionalInfo().before.type===_expression.ExpressionEntity.VariableName.name})));try{for(o.s();!(t=o.n()).done;){var r=t.value,i=new Reason([r],"The unexpected colon is preceded by a variable name and followed by a value. The intention may be to assign the value to the named variable.");n.push(new MisconceptionOccurrence(r.getLineNumber(),r.getDocIndex(),i))}}catch(e){o.e(e)}finally{o.f()}return n},compareMultipleValuesWithOr=function(e){var t,n=[],o=_createForOfIteratorHelper(e.filter((function(e){return e.getID()===_symptom2.SymptomType.NaturalLanguageBoolean.name})));try{for(o.s();!(t=o.n()).done;){var r=t.value,i=new Reason([r],"A non-boolean value is used where a boolean expression is expected.");n.push(new MisconceptionOccurrence(r.getLineNumber(),r.getDocIndex(),i))}}catch(e){o.e(e)}finally{o.f()}return n},comparisonWithBoolLiteral=function(e){var t,n=[],o=_createForOfIteratorHelper(e.filter((function(e){return e.getID()===_symptom2.SymptomType.CompareBoolLiteral.name})));try{for(o.s();!(t=o.n()).done;){var r=t.value,i=r.toJSON();if(i.boolLiteral===_constants.TRUE){var a=new Reason([r],"".concat(i.boolValue," is a boolean value so ").concat(i.operator," ").concat(i.boolLiteral," is redundant."));n.push(new MisconceptionOccurrence(r.getLineNumber(),r.getDocIndex(),a))}else{var s=new Reason([r],"".concat(i.boolValue," is a boolean value so the expression can be rewritten as not ").concat(i.boolValue,"."));n.push(new MisconceptionOccurrence(r.getLineNumber(),r.getDocIndex(),s))}}}catch(e){o.e(e)}finally{o.f()}return n},deferredReturn=function(e){var t,n=[],o=_createForOfIteratorHelper(e.filter((function(e){return e.getID()===_symptom2.SymptomType.UnreachableExit.name&&e.getAdditionalInfo().exitKeyword===_constants.RETURN_KEYWORD})));try{for(o.s();!(t=o.n()).done;){var r=t.value,i=r.toJSON(),a=new Reason([r],"The user-defined function, ".concat(i.functionName,", contains code after the return statement."));n.push(new MisconceptionOccurrence(r.getLineNumber(),r.getDocIndex(),a))}}catch(e){o.e(e)}finally{o.f()}return n},forLoopVarIsLocal=function(e){var t,n=[],o=_createForOfIteratorHelper(e.filter((function(e){return e.getID()===_symptom2.SymptomType.OverwrittenVariable.name&&e.getAdditionalInfo().overwriteType===_constants.FOR_LOOP_VAR&&e.getAdditionalInfo().overwriteValue!==_constants.SAME_VALUE})));try{for(o.s();!(t=o.n()).done;){var r=t.value,i=new Reason([r],"The iterating variable ".concat(r.getAffectedText()," is initialised before the loop. ").concat(r.getAdditionalInfo().overwriteValue===_constants.DIFFERENT_VALUE?"The overwritten value is different from the value initialised by the loop":"It could not be determined if the overwritten value is the same as the value initialised by the loop","."));n.push(new MisconceptionOccurrence(r.getLineNumber(),r.getDocIndex(),i))}}catch(e){o.e(e)}finally{o.f()}return n},functionCallsNoParentheses=function(e){var t=e.filter((function(e){return e.getID()===_symptom2.SymptomType.UndefinedVariable.name})),n=e.filter((function(e){return e.getID()===_symptom2.SymptomType.SubscriptedNonSubscriptable.name})),o=e.filter((function(e){return e.getID()===_symptom2.SymptomType.VariableWithSameNameAsFunction.name&&(e.getAdditionalInfo().funcType===_constants.BUILT_IN_FUNCTION||e.getAdditionalInfo().funcType===_constants.USER_DEFINED_FUNCTION&&e.getAdditionalInfo().numArgsExpected>0)})),r=[];if(0===o.length||0===t.length)return r;var i,a=_createForOfIteratorHelper(t);try{var s=function(){var e,t=i.value,a=t.getAffectedText(),s=t.getDocIndex(),c=_createForOfIteratorHelper(o);try{for(c.s();!(e=c.n()).done;){var l=e.value;if(l.getAffectedText()===a&&l.getDocIndex()===s)if(0===n.filter((function(e){return e.getAdditionalInfo().varName===a&&e.getDocIndex()===s})).length){var u=new Reason([t,l],"The variable ".concat(a," has not been assigned a value and the file contains a user-defined function of the same name."));r.push(new MisconceptionOccurrence(t.getLineNumber(),t.getDocIndex(),u))}}}catch(e){c.e(e)}finally{c.f()}};for(a.s();!(i=a.n()).done;)s()}catch(e){a.e(e)}finally{a.f()}return r},functionCallsUseSquareBrackets=function(e){var t,n=e.filter((function(e){return e.getID()===_symptom2.SymptomType.SubscriptedNonSubscriptable.name})),o=e.filter((function(e){return e.getID()===_symptom2.SymptomType.VariableWithSameNameAsFunction.name})),r=[],i=_createForOfIteratorHelper(n);try{for(i.s();!(t=i.n()).done;){var a,s=t.value,c=s.getAdditionalInfo().varName,l=s.getDocIndex(),u=_createForOfIteratorHelper(o);try{for(u.s();!(a=u.n()).done;){var p=a.value;if(p.getAffectedText()===c&&p.getDocIndex()===l){var f=s.getAdditionalInfo().isUndefined?"undefined variable":"unknown data type"===s.getAdditionalInfo().subscriptedType?"variable with unknown data type":"variable with ".concat(s.getAdditionalInfo().subscriptedType," data type"),d=new Reason([s,p],"".concat(c," (").concat(f,") has the same name as a function. ").concat(c," is subscripted, suggesting a mistake may have been made while calling a function of the same name. It is possible there is confusion about when to use square brackets versus parentheses."));r.push(new MisconceptionOccurrence(s.getLineNumber(),s.getDocIndex(),d))}}}catch(e){u.e(e)}finally{u.f()}}}catch(e){i.e(e)}finally{i.f()}return r},iterationRequiresTwoLoops=function(e){var t,n=[],o=_createForOfIteratorHelper(e.filter((function(e){return e.getID()===_symptom2.SymptomType.LoopVarModifiedInChildLoop.name&&"for"===e.getAdditionalInfo().modifiedIn.loopType&&1===e.getAdditionalInfo().varDataType.length&&"int"===e.getAdditionalInfo().varDataType[0]})));try{for(o.s();!(t=o.n()).done;){var r=t.value,i=new Reason([r],"The int variable ".concat(r.getAffectedText()," is referenced in a while loop condition but only modified in a nested for loop. If ").concat(r.getAffectedText()," is being used to count the iterated items, the two loops could be replaced with a single for loop using enumerate() or range() to count the items."));n.push(new MisconceptionOccurrence(r.getLineNumber(),r.getDocIndex(),i))}}catch(e){o.e(e)}finally{o.f()}return n},iteratorInitialisedOutsideLoop=function(e){var t,n=[],o=_createForOfIteratorHelper(e.filter((function(e){return e.getID()===_symptom2.SymptomType.OverwrittenVariable.name&&e.getAdditionalInfo().overwriteType===_constants.FOR_LOOP_VAR&&e.getAdditionalInfo().overwriteValue===_constants.SAME_VALUE})));try{for(o.s();!(t=o.n()).done;){var r=t.value,i=new Reason([r],"The iterating variable ".concat(r.getAffectedText()," is initialised before the loop with the same value that it is initialised with in the for loop definition."));n.push(new MisconceptionOccurrence(r.getLineNumber(),r.getDocIndex(),i))}}catch(e){o.e(e)}finally{o.f()}return n},localVariablesAreGlobal=function(e,t){var n,o=[],r=_createForOfIteratorHelper(e.filter((function(e){return e.getID()===_symptom2.SymptomType.UndefinedVariable.name&&e.getAdditionalInfo().variable.getScope().getBlockEntity()===_expression.ExpressionEntity.DocumentDefinition})));try{for(r.s();!(n=r.n()).done;){var i=n.value,a=i.getAdditionalInfo().variable.getName(),s=t.get(a).filter((function(e){return e.getScope().getBlockEntity()!==_expression.ExpressionEntity.DocumentDefinition}));if(s.length>0){var c=new Reason([i],"The undefined variable ".concat(i.getAffectedText()," has global scope. The document contains ").concat(s.length," other ").concat(1===s.length?"variable":"variables"," with the same name in function scope."));o.push(new MisconceptionOccurrence(i.getLineNumber(),i.getDocIndex(),c))}}}catch(e){r.e(e)}finally{r.f()}return o},loopCounter=function(e){var t,n=[],o=_createForOfIteratorHelper(e.filter((function(e){return e.getID()===_symptom2.SymptomType.ForLoopIteratorModified.name||e.getID()===_symptom2.SymptomType.WhileLoopVarAssignedIntLiteral.name})));try{for(o.s();!(t=o.n()).done;){var r=t.value,i="";i=r.getID()===_symptom2.SymptomType.ForLoopIteratorModified.name?"The for loop iterator variable ".concat(r.getAffectedText()," is modified in the loop."):"The while loop variable ".concat(r.getAffectedText()," is assigned a literal int value.");var a=new Reason([r],i);n.push(new MisconceptionOccurrence(r.getLineNumber(),r.getDocIndex(),a))}}catch(e){o.e(e)}finally{o.f()}return n},mapToBooleanWithIf=function(e){var t,n=[],o=_createForOfIteratorHelper(e.filter((function(e){return e.getID()===_symptom2.SymptomType.OneLineConditional.name})));try{for(o.s();!(t=o.n()).done;){var r=t.value,i=r.toJSON();if(i.form===_constants.VALUE_RETURNED){var a=new Reason([r],"Conditional returns a boolean literal that matches the value of the boolean expression in the if statement. The whole conditional could be replaced with a single line.");n.push(new MisconceptionOccurrence(r.getLineNumber(),r.getDocIndex(),a))}else if(i.form===_constants.VALUE_ASSIGNED){var s=new Reason([r],"The variable ".concat(i.variableAssigned," is assigned a boolean literal that matches the value of the boolean expression in the if statement. The whole conditional could be replaced with a single line."));n.push(new MisconceptionOccurrence(r.getLineNumber(),r.getDocIndex(),s))}}}catch(e){o.e(e)}finally{o.f()}return n},mapToBooleanWithTernary=function(e){var t,n=[],o=_createForOfIteratorHelper(e.filter((function(e){return e.getID()===_symptom2.SymptomType.TernaryReturnsBool.name})));try{for(o.s();!(t=o.n()).done;){var r=t.value,i=new Reason([r],"Ternary returns a boolean literal that matches the value of the boolean expression in the ternary. The ternary could be replaced with the boolean expression alone.");n.push(new MisconceptionOccurrence(r.getLineNumber(),r.getDocIndex(),i))}}catch(e){o.e(e)}finally{o.f()}return n},noKeyword=function(e){var t,n=e.filter((function(e){return e.getID()===_symptom2.SymptomType.UnexpectedColon.name&&e.getAdditionalInfo().after.type===_constants.EMPTY&&(e.getAdditionalInfo().before.type===_expression.ExpressionEntity.FunctionName.name||e.getAdditionalInfo().before.type===_constants.BOOLEAN_EXPRESSION)})),o=e.filter((function(e){return e.getID()===_symptom2.SymptomType.UnknownFunction.name})),r=[],i=_createForOfIteratorHelper(n);try{var a=function(){var e=t.value;if(e.getAdditionalInfo().before.type===_expression.ExpressionEntity.FunctionName.name){var n=o.filter((function(t){return t.getAffectedText()===e.getAdditionalInfo().before.value}));if(n.length>0){var i=new Reason([e,n[0]],"The unexpected colon is preceded by a call to unknown function, ".concat(n[0].getAffectedText(),". It is possible the intention was to declare a function but the def keyword has been omitted."));r.push(new MisconceptionOccurrence(e.getLineNumber(),e.getDocIndex(),i))}}else if(e.getAdditionalInfo().before.type===_constants.BOOLEAN_EXPRESSION){var a=new Reason([e],"The unexpected colon is preceded by a Boolean expression. It is possible the intention was to declare a while, if, or elif but the keyword was omitted.");r.push(new MisconceptionOccurrence(e.getLineNumber(),e.getDocIndex(),a))}};for(i.s();!(t=i.n()).done;)a()}catch(e){i.e(e)}finally{i.f()}return r},noReservedWords=function(e){var t,n=e.filter((function(e){return e.getID()===_symptom2.SymptomType.DefinitionFollowedByReservedWord.name})),o=e.filter((function(e){return e.getID()===_symptom2.SymptomType.ReservedWordAssigned.name})),r=[],i=_createForOfIteratorHelper(n);try{for(i.s();!(t=i.n()).done;){var a=t.value,s=new Reason([a],"The reserved word, ".concat(a.getAdditionalInfo().reservedWord,", follows the ").concat(a.getAdditionalInfo().definitionType,"."));r.push(new MisconceptionOccurrence(a.getLineNumber(),a.getDocIndex(),s))}}catch(e){i.e(e)}finally{i.f()}var c,l=_createForOfIteratorHelper(o);try{for(l.s();!(c=l.n()).done;){var u=c.value,p=new Reason([u],"The reserved word, ".concat(u.getAffectedText(),", is followed by the assignment operator."));r.push(new MisconceptionOccurrence(u.getLineNumber(),u.getDocIndex(),p))}}catch(e){l.e(e)}finally{l.f()}return r},parenthesesOnlyIfArgument=function(e){var t=e.filter((function(e){return e.getID()===_symptom2.SymptomType.UndefinedVariable.name})),n=e.filter((function(e){return e.getID()===_symptom2.SymptomType.VariableWithSameNameAsFunction.name&&e.getAdditionalInfo().funcType===_constants.USER_DEFINED_FUNCTION&&0===e.getAdditionalInfo().numArgsExpected})),o=[];if(0===n.length)return o;var r,i=_createForOfIteratorHelper(t);try{for(i.s();!(r=i.n()).done;){var a,s=r.value,c=s.getAffectedText(),l=s.getDocIndex(),u=_createForOfIteratorHelper(n);try{for(u.s();!(a=u.n()).done;){var p=a.value;if(p.getAffectedText()===c&&p.getDocIndex()===l){var f=new Reason([s,p],"The variable ".concat(c," has not been assigned a value and the file contains a user-defined function of the same name that does not expect any arguments."));o.push(new MisconceptionOccurrence(s.getLineNumber(),s.getDocIndex(),f))}}}catch(e){u.e(e)}finally{u.f()}}}catch(e){i.e(e)}finally{i.f()}return o},printSameAsReturn=function(e){var t,n=e.filter((function(e){return e.getID()===_symptom2.SymptomType.AssignedNone.name})),o=e.filter((function(e){return e.getID()===_symptom2.SymptomType.FunctionPrints.name})),r=e.filter((function(e){return e.getID()===_symptom2.SymptomType.UnusedReturn.name&&e.getAdditionalInfo().expression.is(_expression.ExpressionEntity.FunctionName)})),i=[],a=_createForOfIteratorHelper(n);try{for(a.s();!(t=a.n()).done;){var s=t.value,c=s.toJSON();if(c.expressionNoValue.type===_constants.USER_DEFINED_FUNCTION)!function(){var e=c.expressionNoValue.value,t=o.filter((function(t){return t.getAffectedText()===e}));if(t.length>0){var n=new Reason([s].concat(_toConsumableArray(t)),"User-defined function ".concat(e," prints to the console but does not return a value."));i.push(new MisconceptionOccurrence(s.getLineNumber(),s.getDocIndex(),n))}}();else if(c.expressionNoValue.type===_constants.BUILT_IN_FUNCTION&&"print"===c.expressionNoValue.value){var l=new Reason([s],"The print function does not return a value but it is used as if it does.");i.push(new MisconceptionOccurrence(s.getLineNumber(),s.getDocIndex(),l))}}}catch(e){a.e(e)}finally{a.f()}var u,p=_createForOfIteratorHelper(r);try{var f=function(){var e=u.value,t=e.toJSON().unusedFunc.value,n=o.filter((function(e){return e.getAffectedText()===t}));if(n.length>0){var r=new Reason([e].concat(_toConsumableArray(n)),"User-defined function ".concat(t," prints to the console and returns a value but the value is not used."));i.push(new MisconceptionOccurrence(e.getLineNumber(),e.getDocIndex(),r))}};for(p.s();!(u=p.n()).done;)f()}catch(e){p.e(e)}finally{p.f()}return i},returnCall=function(e){var t=e.filter((function(e){return e.getID()===_symptom2.SymptomType.ReturnInParentheses.name}));return t.map((function(e){return new MisconceptionOccurrence(e.getLineNumber(),e.getDocIndex(),new Reason([e],"The function returns a ".concat((t=e.getAdditionalInfo().contents)===_constants.FUNCTION_CALL?"function call":t===_constants.COMPOUND_TYPE_DEFINITION?"compound type (e.g. list, set)":t===_constants.COMPOUND_EXPRESSION?"compound expression":t," wrapped in parentheses. The parentheses are unnecessary.")));var t}))},sequentialIfsAreExclusive=function(e){var t,n=[],o=_createForOfIteratorHelper(e.filter((function(e){return e.getID()===_symptom2.SymptomType.SequentialIfs.name&&e.getAdditionalInfo().branchMatches.length>0})));try{for(o.s();!(t=o.n()).done;){var r,i=t.value,a=_createForOfIteratorHelper(i.getAdditionalInfo().branchMatches);try{for(a.s();!(r=a.n()).done;){var s=r.value,c=s.map((function(e){return e.lineNum+1})).join(", "),l=c.lastIndexOf(",");c=c.substring(0,l)+" and"+c.substring(l+1);var u,p=_createForOfIteratorHelper(s);try{for(p.s();!(u=p.n()).done;){var f=u.value;n.push(new MisconceptionOccurrence(f.lineNum,f.docIndex,new Reason([i],"The if statement is part of a sequence of if statements (lines ".concat(c,") that have very similar boolean expressions."))))}}catch(e){p.e(e)}finally{p.f()}}}catch(e){a.e(e)}finally{a.f()}}}catch(e){o.e(e)}finally{o.f()}return n},parameterMustBeAssignedInFunction=function(e){var t,n=new Set(e.filter((function(e){return e.getID()===_symptom2.SymptomType.AssignmentInReturn.name})).map((function(e){return e.getLineNumber()}))),o=[],r=_createForOfIteratorHelper(e.filter((function(e){return e.getID()===_symptom2.SymptomType.OverwrittenVariable.name&&e.getAdditionalInfo().isParameter&&e.getAdditionalInfo().prevUsageIsDefinition&&!n.has(e.getLineNumber())})));try{for(r.s();!(t=r.n()).done;){var i=t.value,a=new Reason([i],"The parameter ".concat(i.getAffectedText()," is overwritten before use."));o.push(new MisconceptionOccurrence(i.getLineNumber(),i.getDocIndex(),a))}}catch(e){r.e(e)}finally{r.f()}return o},stringMethodsModifyTheString=function(e){var t,n=[],o=_createForOfIteratorHelper(e.filter((function(e){return e.getID()===_symptom2.SymptomType.UnusedReturn.name&&e.getAdditionalInfo().expression.is(_expression.ExpressionCategory.BuiltInMethods)&&_expression.stringMethodsLookup.has(e.getAdditionalInfo().expression.getEntity())})));try{for(o.s();!(t=o.n()).done;){var r=t.value,i=new Reason([r],"A String method, ".concat(r.getAdditionalInfo().expression.getValue(),", that returns a new string is called but the return value is not assigned or passed."));n.push(new MisconceptionOccurrence(r.getLineNumber(),r.getDocIndex(),i))}}catch(e){o.e(e)}finally{o.f()}return n},typeConversionModifiesArgument=function(e){var t,n=[],o=_createForOfIteratorHelper(e.filter((function(e){return e.getID()===_symptom2.SymptomType.UnusedReturn.name&&e.getAdditionalInfo().expression.isOneOfEntities([_expression.ExpressionEntity.StrFunction,_expression.ExpressionEntity.IntFunction,_expression.ExpressionEntity.FloatFunction,_expression.ExpressionEntity.BoolFunction,_expression.ExpressionEntity.ListFunction,_expression.ExpressionEntity.TupleFunction,_expression.ExpressionEntity.SetFunction])})));try{for(o.s();!(t=o.n()).done;){var r=t.value,i=new Reason([r],"".concat(r.getAdditionalInfo().expression.getValue(),"() is called but the converted value returned by the function is not saved or passed."));n.push(new MisconceptionOccurrence(r.getLineNumber(),r.getDocIndex(),i))}}catch(e){o.e(e)}finally{o.f()}return n},whileSameAsIf=function(e){var t,n=e.filter((function(e){return e.getID()===_symptom2.SymptomType.LoopVarNotModified.name})),o=e.filter((function(e){return e.getID()===_symptom2.SymptomType.WhileTrue.name})),r=e.filter((function(e){return e.getID()===_symptom2.SymptomType.LoopReturn.name})),i=[],a=_createForOfIteratorHelper(n);try{var s=function(){var e=t.value,n=r.filter((function(t){return t.getBlock()===e.getBlock()}));if(n.length>0){var o=new Reason([e].concat(_toConsumableArray(n)),"No while loop variables are modified (excluding modifications in any nested loops) and the loop always exits on the first iteration.");i.push(new MisconceptionOccurrence(e.getLineNumber(),e.getDocIndex(),o))}};for(a.s();!(t=a.n()).done;)s()}catch(e){a.e(e)}finally{a.f()}var c,l=_createForOfIteratorHelper(o);try{var u=function(){var e=c.value,t=r.filter((function(t){return t.getBlock()===e.getBlock()}));if(t.length>0){var n=new Reason([e].concat(_toConsumableArray(t)),'A "while True" loop always exits on the first iteration and therefore behaves as an if statement. Caution: the intention here may be to continue iteration, in which case the misconception lies elsewhere.');i.push(new MisconceptionOccurrence(e.getLineNumber(),e.getDocIndex(),n))}};for(l.s();!(c=l.n()).done;)u()}catch(e){l.e(e)}finally{l.f()}return i},typeMustBeSpecified=function(e){var t,n=[],o=_createForOfIteratorHelper(e.filter((function(e){return e.getID()===_symptom2.SymptomType.TypeUnnecessary.name})));try{for(o.s();!(t=o.n()).done;){var r=t.value,i=r.toJSON(),a=void 0;void 0!==(a=i.argType===_constants.STRING&&i.convertedType===_constants.LIST?new Reason([r],"A string value, ".concat(i.convertedValue,", is converted to a list which may not be necessary. The programmer may not realise that much of the functionality provided by a list is also available to strings.")):new Reason([r],"".concat(i.convertedValue," is guaranteed to be a ").concat(i.argType," so there is no need to convert it to ").concat(i.convertedType,".")))&&n.push(new MisconceptionOccurrence(r.getLineNumber(),r.getDocIndex(),a))}}catch(e){o.e(e)}finally{o.f()}return n},_id=new WeakMap,_indicator=new WeakMap,_occurrences=new WeakMap,Misconception=function(){function e(t,n){_classCallCheck(this,e),_classPrivateFieldInitSpec(this,_id,{writable:!0,value:void 0}),_classPrivateFieldInitSpec(this,_indicator,{writable:!0,value:void 0}),_classPrivateFieldInitSpec(this,_occurrences,{writable:!0,value:void 0}),_classPrivateFieldSet(this,_id,t.name),_classPrivateFieldSet(this,_indicator,t.description),_classPrivateFieldSet(this,_occurrences,n)}return _createClass(e,[{key:"addOccurrence",value:function(e){_classPrivateFieldGet(this,_occurrences).push(e)}},{key:"toJSON",value:function(){return{type:_classPrivateFieldGet(this,_id),description:_classPrivateFieldGet(this,_indicator),occurrences:_classPrivateFieldGet(this,_occurrences).map((function(e){return e.toJSON()}))}}}],[{key:"create",value:function(t,n){return new e(t,n)}}]),e}();exports.Misconception=Misconception;var _line=new WeakMap,_docIndex=new WeakMap,_reason6=new WeakMap,MisconceptionOccurrence=function(){function e(t,n,o){_classCallCheck(this,e),_classPrivateFieldInitSpec(this,_line,{writable:!0,value:void 0}),_classPrivateFieldInitSpec(this,_docIndex,{writable:!0,value:void 0}),_classPrivateFieldInitSpec(this,_reason6,{writable:!0,value:void 0}),_classPrivateFieldSet(this,_line,t),_classPrivateFieldSet(this,_docIndex,n),_classPrivateFieldSet(this,_reason6,o)}return _createClass(e,[{key:"getLineNumber",value:function(){return _classPrivateFieldGet(this,_line)}},{key:"getDocIndex",value:function(){return _classPrivateFieldGet(this,_docIndex)}},{key:"getReason",value:function(){return _classPrivateFieldGet(this,_reason6)}},{key:"toJSON",value:function(){return{line:_classPrivateFieldGet(this,_line),docIndex:_classPrivateFieldGet(this,_docIndex),reason:_classPrivateFieldGet(this,_reason6).toJSON()}}}]),e}();exports.MisconceptionOccurrence=MisconceptionOccurrence;var _contributingSymptoms=new WeakMap,_explanation=new WeakMap,Reason=function(){function e(t,n){_classCallCheck(this,e),_classPrivateFieldInitSpec(this,_contributingSymptoms,{writable:!0,value:void 0}),_classPrivateFieldInitSpec(this,_explanation,{writable:!0,value:void 0}),_classPrivateFieldSet(this,_contributingSymptoms,t),_classPrivateFieldSet(this,_explanation,n)}return _createClass(e,[{key:"toJSON",value:function(){return{contributingSymptoms:_classPrivateFieldGet(this,_contributingSymptoms).map((function(e){return e.toJSON()})),explanation:_classPrivateFieldGet(this,_explanation)}}}]),e}();exports.Reason=Reason;var MisconceptionType=function(e){_inherits(n,_enum["default"]);var t=_createSuper(n);function n(e,o){var r;return _classCallCheck(this,n),_defineProperty(_assertThisInitialized(r=t.call(this,e)),"description",void 0),r.description=o,r}return _createClass(n)}();exports.MisconceptionType=MisconceptionType,_defineProperty(MisconceptionType,"AssignCompares",new MisconceptionType("AssignCompares","A single equals is used where a boolean expression is expected, e.g. in a conditional statement. This may be a typo or confusion between single and double equals operators.")),_defineProperty(MisconceptionType,"ColonAssigns",new MisconceptionType("ColonAssigns","A colon is used between a variable name and a value. This may be a typo.")),_defineProperty(MisconceptionType,"CompareMultipleValuesWithOr",new MisconceptionType("CompareMultipleValuesWithOr","A boolean expression has the form a == some_value or other_value, where other_value is non-boolean. There is likely a misunderstanding of the syntax of comparing multiple values.")),_defineProperty(MisconceptionType,"ComparisonWithBoolLiteral",new MisconceptionType("ComparisonWithBoolLiteral",'A boolean expression contains "== True" or "== False". The programmer may believe that explicitly checking equality is always necessary in a boolean expression.')),_defineProperty(MisconceptionType,"DeferredReturn",new MisconceptionType("DeferredReturn","Code follows a return statement in a function. The programmer may not realise that a return statement causes the function to exit immediately.")),_defineProperty(MisconceptionType,"ForLoopVarIsLocal",new MisconceptionType("ForLoopVarIsLocal","An iterating variable in a for loop overwrites a variable declared before the loop and the value is different from the overwritten value, or the values cannot be determined. This potential misconception is similar to IteratorInitialisedOutsideLoop.")),_defineProperty(MisconceptionType,"FunctionCallsNoParentheses",new MisconceptionType("FunctionCallsNoParentheses","An undefined variable has the same name as a function. There may be a misunderstanding about how to call a function. Caution: functions in Python are first class objects, so it is possible that use of the function name without parentheses is intended and there is no misconception.")),_defineProperty(MisconceptionType,"FunctionCallsUseSquareBrackets",new MisconceptionType("FunctionCallsUseSquareBrackets","The name of a function is called followed by square brackets rather than parentheses. The programmer may not be aware of when to use which type of bracket.")),_defineProperty(MisconceptionType,"IterationRequiresTwoLoops",new MisconceptionType("IterationRequiresTwoLoops","A while loop with an integer loop variable contains a nested for loop. The while loop variable is only modified in the nested for loop and is used to count items in the variable iterated in the for loop. The two nested loops could be replaced with a single for loop using enumerate() or range().")),_defineProperty(MisconceptionType,"IteratorInitialisedOutsideLoop",new MisconceptionType("IteratorInitialisedOutsideLoop","The iterating variable in a for loop is initialised before the loop with the same value. The programmer may not know that the iterating variable is initialised in the for loop definition.")),_defineProperty(MisconceptionType,"LocalVariablesAreGlobal",new MisconceptionType("LocalVariablesAreGlobal","An undefined variable in document scope has the same name as a variable with function scope. This may indicate a misunderstanding of variable scope.")),_defineProperty(MisconceptionType,"LoopCounter",new MisconceptionType("LoopCounter","A for loop iterator variable is modified in the loop and the modified variable is not used, or a while loop counter is assigned an int literal rather than incremented, or assigned the result of a function call. This may indicate confusion over how loops use loop variables.")),_defineProperty(MisconceptionType,"MapToBooleanWithIf",new MisconceptionType("MapToBooleanWithIf","A conditional statement checks a boolean expression only to return or assign a value that matches the value of the boolean expression. The programmer may not realise that a boolean expression can be assigned or returned directly.")),_defineProperty(MisconceptionType,"MapToBooleanWithTernaryOperator",new MisconceptionType("MapToBooleanWithTernaryOperator","A ternary checks a boolean expression only to return or assign a value that matches the value of the boolean expression. The programmer may not realise that a boolean expression can be assigned or returned directly.")),_defineProperty(MisconceptionType,"NoKeyword",new MisconceptionType("NoKeyword","A block definition keyword (e.g. def, if, while) is missing where one is expected. The programmer may not realise that the keyword is required.")),_defineProperty(MisconceptionType,"NoReservedWords",new MisconceptionType("NoReservedWords","Any string that meets naming character constraints can be used as an identifier (name of a variable, function, method, or class).")),_defineProperty(MisconceptionType,"ParameterMustBeAssignedInFunction",new MisconceptionType("ParameterMustBeAssignedInFunction","A user defined function has named parameter but the parameter value is overwritten in the function before it is used e.g. by prompting for command line input. This indicates potential misconceptions about the purpose or use of function parameters.")),_defineProperty(MisconceptionType,"ParenthesesOnlyIfArgument",new MisconceptionType("ParenthesesOnlyIfArgument","An undefined variable has the same name as a user-defined function with no arguments. There may be a misunderstanding of the syntax of function calls.")),_defineProperty(MisconceptionType,"PrintSameAsReturn",new MisconceptionType("PrintSameAsReturn","A call to a function that prints but does not return (including the print() function) is assigned or passed, or a call to a function that prints before returning a value is not assigned or passed. There may be confusion about printing a value versus returning a value.")),_defineProperty(MisconceptionType,"ReturnCall",new MisconceptionType("ReturnCall","Function return values are surrounded by parentheses. There may be a belief that return needs to be called like a function.")),_defineProperty(MisconceptionType,"SequentialIfsAreExclusive",new MisconceptionType("SequentialIfsAreExclusive","If statements with very similar conditional statements appear in a sequence. There may be a belief that subsequent if statements will only execute if the previous condition does not. Alternatively, the programmer may not be aware of the efficiency drawbacks of using sequential if statements where a multiway conditional would be more appropriate.")),_defineProperty(MisconceptionType,"StringMethodsModifyTheString",new MisconceptionType("StringMethodsModifyTheString","A string method is called but the result is not saved or passed. There may be an assumption that string methods mutate the string.")),_defineProperty(MisconceptionType,"TypeConversionModifiesArgument",new MisconceptionType("TypeConversionModifiesArgument","A type conversion function (e.g. int(), float()) is called but the return value is not saved or used.")),_defineProperty(MisconceptionType,"TypeMustBeSpecified",new MisconceptionType("TypeMustBeSpecified","A value that is guaranteed to have a particular data type is passed to a type conversion function that returns the same data type. In the case of literals, there may be a belief that type must be specified as in strongly typed languages. In other cases, there may be a misunderstanding or lack of confidence in how Python dynamically determines type.")),_defineProperty(MisconceptionType,"WhileSameAsIf",new MisconceptionType("WhileSameAsIf","A while loop does not modify any of its loop variables and may also always exit during the first iteration. Where this behaviour is intentional, the while definition would be better replaced with an if statement. Where the loop does not exit, there is a risk of an infinite loop."));var misconceptionDetector=new Map([[MisconceptionType.PrintSameAsReturn,printSameAsReturn],[MisconceptionType.MapToBooleanWithIf,mapToBooleanWithIf],[MisconceptionType.ComparisonWithBoolLiteral,comparisonWithBoolLiteral],[MisconceptionType.DeferredReturn,deferredReturn],[MisconceptionType.TypeMustBeSpecified,typeMustBeSpecified],[MisconceptionType.CompareMultipleValuesWithOr,compareMultipleValuesWithOr],[MisconceptionType.ParenthesesOnlyIfArgument,parenthesesOnlyIfArgument],[MisconceptionType.FunctionCallsUseSquareBrackets,functionCallsUseSquareBrackets],[MisconceptionType.FunctionCallsNoParentheses,functionCallsNoParentheses],[MisconceptionType.AssignCompares,assignCompares],[MisconceptionType.ReturnCall,returnCall],[MisconceptionType.SequentialIfsAreExclusive,sequentialIfsAreExclusive],[MisconceptionType.WhileSameAsIf,whileSameAsIf],[MisconceptionType.IterationRequiresTwoLoops,iterationRequiresTwoLoops],[MisconceptionType.StringMethodsModifyTheString,stringMethodsModifyTheString],[MisconceptionType.TypeConversionModifiesArgument,typeConversionModifiesArgument],[MisconceptionType.MapToBooleanWithTernaryOperator,mapToBooleanWithTernary],[MisconceptionType.NoReservedWords,noReservedWords],[MisconceptionType.ParameterMustBeAssignedInFunction,parameterMustBeAssignedInFunction],[MisconceptionType.LocalVariablesAreGlobal,localVariablesAreGlobal],[MisconceptionType.IteratorInitialisedOutsideLoop,iteratorInitialisedOutsideLoop],[MisconceptionType.ForLoopVarIsLocal,forLoopVarIsLocal],[MisconceptionType.LoopCounter,loopCounter],[MisconceptionType.NoKeyword,noKeyword],[MisconceptionType.ColonAssigns,colonAssigns]]);
